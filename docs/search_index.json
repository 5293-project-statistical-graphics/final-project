[["index.html", "5293-Final Project Chapter 1 Introduction", " 5293-Final Project Yujie Tu, Yuchen Meng 2022-05-01 Chapter 1 Introduction Nowadays, plots are popular among all fields because of its conciseness and clearness. R is famous as a powerful tool of making nice plots. Among various R packages, ggplot2 and plotly are two well-known and common tools. But they are of different types, both in attributions and results they provide. ggplot2 is an open-sourced data visualization package created by Hadley Wickham. ggplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics. And plotly is a commercial package and popular these years though it is younger than ggplot2. Plotly is designed by a technical computing company. Due to the difference of these two packages, different group of people may have diverse preference. Plotly has simple syntax and is compatible with many languages. Plotly’s visualization library offers users enhanced interactivity features, such as the ability to interact with graphs on display and zoom in and out. In terms of ggplot2, ggplot2 allows users to incorporate various forms of complexity to their visualizations without additional hassle, and also remove them with ease if necessary. There is an increasing trend to use Github as a tool for computer science and other computer related field. Especially, we learn the instructions of Github in class. And the data of Github can reflect some information of the update process of packages, so we can focus on ggplot2 and plotly and try to explore the information of these packages. The topic we are interested in is the differences between these two packages in Github development. When the users want to involve in the development of packages, they will pull requests on the Github and then issue some problems that they think should be solved. After these messages are posted on the Github, some other users will see them and try to fix them. And then they can also create their commits to Github to share it with others. With their cooperation, the packages will develop and update. In this situation, the problems we have is: The quantity pattern of pull requests, issues and commits for these two packages during time. The solving pattern of pull requests and issues for these two packages. Whether the pandemic has an impact on the development of these two packages. "],["data-sources.html", "Chapter 2 Data sources", " Chapter 2 Data sources We used GitHub REST API to crawl two popular R package’s repositories, ggplot2 and plotly and we will focus on the repositories main branche’ commits, issues and pull requests since these three components can provide some insights on the projects’ development progress and popularity changes over time. And we will restrict all the data to be prior to 2022 (commit time of a commit and created time of issue/pull request). The following function will crawl the “content” of github.com/owner/repo where “content” can be “commits” or “issues” (more info here) Notice that issues API will return both issues and pull requests. # until.time only applies to commits until.time &lt;- &quot;2022-01-01T00:00:00Z&quot; crawler &lt;- function(owner, repo, content){ page &lt;- 1 data.raw &lt;- list() cat(&quot;Each dot represent 100 records.\\n&quot;) while(TRUE){ response &lt;- gh(&quot;GET /repos/{owner}/{repo}/{content}&quot;, owner = owner, repo = repo, content = content, per_page = 100, page = page, state = &quot;all&quot;, until = until.time) cat(&quot;.&quot;) data.raw &lt;- c(data.raw, response) page &lt;- page + 1 # when the returned data has less than 100 records, break the loop since all the record has been crawled if(length(response) != 100) break } cat(&quot;\\n&quot;) write_file(toJSON(data.raw, pretty=TRUE, auto_unbox=TRUE), file = paste(&quot;resources/rawdata/&quot;, repo, &quot;_&quot;, content, &quot;.json&quot;, sep = &quot;&quot;)) } ### not run # code used to crawl commits and issues of ggplot2 and plotly # crawler(owner = &quot;tidyverse&quot;, repo = &quot;ggplot2&quot;, content = &quot;commits&quot;) # crawler(owner = &quot;plotly&quot;, repo = &quot;plotly.R&quot;, content = &quot;commits&quot;) # crawler(owner = &quot;tidyverse&quot;, repo = &quot;ggplot2&quot;, content = &quot;issues&quot;) # crawler(owner = &quot;plotly&quot;, repo = &quot;plotly.R&quot;, content = &quot;issues&quot;) ### END not run Until 2022-01-01T00:00:00Z, ggplot2 has 4816 commits and plotly.R has 3848 commits. Until the last crawling, ggplot2 has 4823 issues and pull requests and plotly.R has 2126 . The raw data provide a lot of info about the commits, issues and pull requests, including but not limited to author (and his/her detailed info), time, message/body, and number of comments. Raw data can be found under resources/rawdata folder "],["data-transformation.html", "Chapter 3 Data transformation", " Chapter 3 Data transformation The raw data comes in json format. We simply extracted desired properties from json and store them in a csv file. Since issue API does not allow us to crawl data prior a specific time, we will also remove issue and pull request created after 2022. library(tidyverse) library(lubridate) library(jsonlite) The following function extracts several properties from commit raw data. clean_commits &lt;- function(raw.commits, repo){ clean.commits &lt;- tibble(commit_info = raw.commits) %&gt;% mutate( author = sapply(commit_info, function(x){x$author$login}), date = sapply(commit_info, function(x){x$commit$author$date}), message = sapply(commit_info, function(x){x$commit$message}), url = sapply(commit_info, function(x){x$html_url}), repo = repo) %&gt;% select(-commit_info) %&gt;% unnest(author) return(clean.commits) } commit.ggplot.raw &lt;- read_json(path = &quot;resources/rawdata/ggplot2_commits.json&quot;) commit.ggplot &lt;- clean_commits(commit.ggplot.raw, &quot;ggplot2&quot;) commit.plotly.raw &lt;- read_json(path = &quot;resources/rawdata/plotly.R_commits.json&quot;) commit.plotly &lt;- clean_commits(commit.plotly.raw, &quot;plotly&quot;) ### not run # bind_rows(commit.ggplot, commit.plotly) %&gt;% write_csv(&quot;resources/data/commits.csv&quot;) ### END not run In previous chapter, we mentioned that the issue API will return both issues and pull requests. Therefore, we will need to differentiate them between each other and store them in separate tibble. And the main difference between issues and pull requests is that pull request entries have a “pull request” key. The following function will extracts several properties from issues raw data and mark each record issue or pull request. clean_issues &lt;- function(raw.issues, repo){ clean.issues &lt;- tibble(issue_info = raw.issues) %&gt;% mutate( author = sapply(issue_info, function(x){x$user$login}), author_association = sapply(issue_info, function(x){x$author_association}), state = sapply(issue_info, function(x){x$state}), comments = sapply(issue_info, function(x){x$comments}), pull_request = sapply(issue_info, function(x){length(x$pull_request$html_url)}), created_at = sapply(issue_info, function(x){x$created_at}), updated_at = sapply(issue_info, function(x){x$updated_at}), closed_at = sapply(issue_info, function(x){x$closed_at}) %&gt;% as.character(), title = sapply(issue_info, function(x){x$title}), body = sapply(issue_info, function(x){x$body}) %&gt;% as.character(), url = sapply(issue_info, function(x){x$html_url}), repo = repo) %&gt;% filter(year(created_at) != 2022) %&gt;% select(-c(issue_info)) %&gt;% unnest(c(closed_at, body)) %&gt;% mutate(closed_at = ifelse(closed_at == &quot;list()&quot;, NA, closed_at)) return(clean.issues) } issues.ggplot.raw &lt;- read_json(path = &quot;resources/rawdata/ggplot2_issues.json&quot;) issues.ggplot &lt;- clean_issues(issues.ggplot.raw, &quot;ggplot2&quot;) pull_requests.ggplot &lt;- issues.ggplot %&gt;% filter(pull_request != 0) %&gt;% select(-pull_request) issues.ggplot &lt;- issues.ggplot %&gt;% filter(pull_request != 1) %&gt;% select(-pull_request) issues.plotly.raw &lt;- read_json(path = &quot;resources/rawdata/plotly.R_issues.json&quot;) issues.plotly &lt;- clean_issues(issues.plotly.raw, &quot;plotly&quot;) pull_requests.plotly &lt;- issues.plotly %&gt;% filter(pull_request != 0) %&gt;% select(-pull_request) issues.plotly &lt;- issues.plotly %&gt;% filter(pull_request != 1) %&gt;% select(-pull_request) # not run # bind_rows(issues.ggplot, issues.plotly) %&gt;% write_csv(&quot;resources/data/issues.csv&quot;) # bind_rows(pull_requests.ggplot, pull_requests.plotly) %&gt;% write_csv(&quot;resources/data/pull_requests.csv&quot;) ### END not run All the transformed data are stored under resources/data folder. "],["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values "],["results.html", "Chapter 5 Results 5.1 Quantity Pattern", " Chapter 5 Results 5.1 Quantity Pattern We firstly focus on the quantity pattern of these two packages. And then explore some rules for pandemic. Users of Github prefer to create pull requests, issues and commits during weekdays rather than weekends. The number of all pull requests, issues and commits for plotly are smaller than ggplot2. ggplot2 is more popular than plotly on Github. For plotly, the number of issues and commits first increases and then has a decreasing trend after 2016. And for number of pull request of plotly, it has a decreasing trend. For ggplot2, the number of issues, pull requests and commits have a fluctuate process. Users are more interested in the package when it newly came out. After pandemic, less focus is put on these two packages. In particular, the number of commits for ggplot2 has a significant period fluctuation during time. Due to the same meaning in the definition of “COLLABORATOR” and “MEMBER” in these two packages, we combine these two classes into “MEMBER”. Issues are mainly created by common users of these packages. Pull requests are mostly created by members of these packages. Due to pandemic, these packages are not as popular as before. Both packages have similar distribution shape for all author associations and they all have long right tail. And there is a small peak for comments equal to 10 for plotly. Comparing two packages, ggplot2 is more likely to have a heavy tail. Issue and pull request can have two states, open and closed, which is usually to indicate if the issue has been solved or if the pull request has been accepted/rejected. We can see that both packages have very few open pull requests but plotly has far more open issues than ggplot in relative and absolute scale. Let’s first examine the open issues. Although ggplot has more issues than plotly, plotly Next, let’s move our attention to closed issues and pull requests. Most of issues/pull requests were closed within one month but plotly seems to have larger percentage of issues that were open more than one year. Breaking down the percentage over 2014-2021, we can see that both packages seems to having a trend of taking longer to “close” their issues, especially for plotly. "],["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
