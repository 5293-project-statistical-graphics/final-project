[["index.html", "‘Growing’ of ggplot2 and plotly Chapter 1 Introduction", " ‘Growing’ of ggplot2 and plotly Yuchen Meng, Yujie Tu 2022-05-04 Chapter 1 Introduction Nowadays, plots are popular among all fields because of its conciseness and clearness. R is famous as a powerful tool of making nice plots. Among various R graphical packages, ggplot2 and plotly are two well-known and common tools. But they have different graphing philosophy and in consequence have different syntax and features. ggplot2 is an open-source data visualization package and an implementation of A Layered Grammar of Graphics, which enables us to concisely describe the components of a graphic. It ggplot2 allows users to incorporate various forms of complexity to their visualizations without additional hassle, and remove them with ease if necessary. While plotly is also an open-source package designed by a technical computing company and gains popularity over past years though it is younger than ggplot2. It has simple syntax and is compatible with many languages. Plotly’s visualization library offers users enhanced interactivity features, such as the ability to interact with graphs on display. Both ggplot2 and plotly uses GitHub for version control and code management. And we would like to see and compare the development of these two packages through data crawled from GitHub REST API. Specifically, we will crawl commits of main branch, issues, and pull requests for both packages. And the problems we have are: The quantity pattern of pull requests, issues and commits for these two packages during time. The solving pattern of pull requests and issues for these two packages. Whether the pandemic has an impact on the development of these two packages. Here is a little bit detail on how GitHub works: usually, a project on GitHub will have a handful of key developers to develop and maintain. But there can be a whole community of users help this process. They can report problems by submitting an issue, they can help change the source code (fix a bug, add a new feature, and etc.) by submitting a pull request, and all users need to commit their local changes to GitHub so that their modification can be seen online by other users. Of course, we omit tons of details in this short summary, you can learn about all the details about how GitHub works here "],["data-sources.html", "Chapter 2 Data sources", " Chapter 2 Data sources We used GitHub REST API to crawl two popular R package’s repositories, ggplot2 and plotly and we will focus on the repositories main branches’ commits, issues and pull requests since these three components can provide some insights on the projects’ development progress and popularity changes over time. The reason why we only choose main branch is that the main branch can reflect the published modifications (since user can directly install packages on main branch through devtools::install_github). And we will restrict all the data to be prior to 2022 (commit time of a commit and created time of issue/pull request). The following function will crawl the “content” of github.com/owner/repo where “content” can be “commits” or “issues” (more info here) Notice that issues API will return both issues and pull requests. library(gh) library(jsonlite) library(readr) library(dplyr) # until.time only applies to commits until.time &lt;- &quot;2022-01-01T00:00:00Z&quot; crawler &lt;- function(owner, repo, content){ page &lt;- 1 data.raw &lt;- list() cat(&quot;Each dot represent 100 records.\\n&quot;) while(TRUE){ response &lt;- gh(&quot;GET /repos/{owner}/{repo}/{content}&quot;, owner = owner, repo = repo, content = content, per_page = 100, page = page, state = &quot;all&quot;, until = until.time) cat(&quot;.&quot;) data.raw &lt;- c(data.raw, response) page &lt;- page + 1 # when the returned data has less than 100 records, break the loop # since all the record has been crawled if(length(response) != 100) break } cat(&quot;\\n&quot;) write_file(toJSON(data.raw, pretty=TRUE, auto_unbox=TRUE), file = paste(&quot;resources/rawdata/&quot;, repo, &quot;_&quot;, content, &quot;.json&quot;, sep = &quot;&quot;)) } ### not run # code used to crawl commits and issues of ggplot2 and plotly # crawler(owner = &quot;tidyverse&quot;, repo = &quot;ggplot2&quot;, content = &quot;commits&quot;) # crawler(owner = &quot;plotly&quot;, repo = &quot;plotly.R&quot;, content = &quot;commits&quot;) # crawler(owner = &quot;tidyverse&quot;, repo = &quot;ggplot2&quot;, content = &quot;issues&quot;) # crawler(owner = &quot;plotly&quot;, repo = &quot;plotly.R&quot;, content = &quot;issues&quot;) ### END not run As of 2022-01-01T00:00:00Z, ggplot2 has 4816 commits and plotly.R has 3848 commits. Until the last crawling (2022-05-01 18:00:00 EDT), ggplot2 has 4823 issues and pull requests and plotly.R has 2126 issues and pull requests. The raw data provide a lot of info about the commits, issues and pull requests, including but not limited to author (and his/her detailed info), time, message/body, and number of comments. Raw data can be found under resources/rawdata folder "],["data-transformation.html", "Chapter 3 Data transformation", " Chapter 3 Data transformation The raw data comes in json format. We simply extracted desired properties from json and store them in a csv file. Since issue API does not allow us to crawl data prior a specific time, we will also remove issue and pull request created after 2022. The following function extracts several properties from commit raw data. library(tidyverse) library(lubridate) library(jsonlite) clean_commits &lt;- function(raw.commits, repo){ clean.commits &lt;- tibble(commit_info = raw.commits) %&gt;% mutate( author = sapply(commit_info, function(x){x$author$login}), date = sapply(commit_info, function(x){x$commit$author$date}), url = sapply(commit_info, function(x){x$html_url}), repo = repo) %&gt;% select(-commit_info) %&gt;% unnest(author) return(clean.commits) } commit.ggplot.raw &lt;- read_json(path = &quot;resources/rawdata/ggplot2_commits.json&quot;) commit.ggplot &lt;- clean_commits(commit.ggplot.raw, &quot;ggplot2&quot;) commit.plotly.raw &lt;- read_json(path = &quot;resources/rawdata/plotly.R_commits.json&quot;) commit.plotly &lt;- clean_commits(commit.plotly.raw, &quot;plotly&quot;) ### not run # bind_rows(commit.ggplot, commit.plotly) %&gt;% write_csv(&quot;resources/data/commits.csv&quot;) ### END not run In previous chapter, we mentioned that the issue API will return both issues and pull requests. Therefore, we will need to differentiate them between each other and store them in separate tibble. And the main difference between issues and pull requests is that pull request entries have a “pull request” key. The following function will extracts several properties from issues raw data and mark each record issue or pull request. All the transformed data are stored under resources/data folder. "],["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values We can see that commit has no missing value. We can see that closed_at columns of issues whose state are open are completely missing, which makes sense since “open” issue won’t have a closed date. The same applies for pull requests. Only closed_at columns of pull requests whose state are open are completely missing. "],["results.html", "Chapter 5 Results 5.1 Users prefer weekdays or weekends? 5.2 Slow down during pandemic? 5.3 Who are the most active users over years? 5.4 Do different roles get different number of comments? 5.5 Are most of issues/pull requests still unsolved? 5.6 Are open cases percentage increasing? 5.7 How long to solve issues/pull requests? 5.8 Do different years exhibit different patterns to solve issue/pull request?", " Chapter 5 Results 5.1 Users prefer weekdays or weekends? It is natural to guess that users will tend to do most of their word (submit commits, create issues and pull requests) during weekdays. And it is the case for commits of both packages and pull requests of plotly, where there are a steep drop in numbers. But surprisingly, there are still quite a lot of pull requests (drops for about 50%) are submitted on weekends for ggplot2, and the number of issues created on weekends for both packages are also not that small. 5.2 Slow down during pandemic? We can see that almost all the numbers are decreasing over the past few years except for ggplot2’s issues and plotly’s pull requests. Although it’s tempting to think that the pandemic may actually slow down both packages’ development, yet there is no causality here and there may be many factors behind such decreases. Also we can see that the number of issues created over the past few years hardly decreases for ggplot2. But strangely, plotly has very few pull requests over the last four years (almost zero pull request on 2017 and 2020) 5.3 Who are the most active users over years? Let’s break down the number of issues and pull requests to the level of user’s roles. Due to the similar meaning in the definition of “COLLABORATOR” and “MEMBER” in these two packages, we combine these two categories into one, “DEVELOPER”. (author association’s definition can be found here) As expected, issues are mainly created by “NONE” users and pull requests are mainly created by “COLLABORATOR / MEMBER” users. But there is a clear downward trend for “DEVELOPER” users of both packages, especially in ggplot2’s pull request graph. 5.4 Do different roles get different number of comments? We can see that the overall distribution skew to the right a lot regardless of packages, categories (issue or pull request), or author association, especially for plotly. And in general, ggplot2 ’s users get more comments than plotly’s. But it is hard to believe that 25% of pull requests of plotly’s developer and 50% of issues created by plotly’s developer receives 0 comments. 5.5 Are most of issues/pull requests still unsolved? Issue and pull request can have two status, open and closed, which indicates if the issue has been solved or if the pull request has been accepted/rejected. We can see that both packages have very few open pull requests but plotly has far more open issues than ggplot both in relative and absolute scale. 5.6 Are open cases percentage increasing? Let’s first dive into the open issues. We can see that the percentage of “open” issues (issues whose status are still open) increases for plotly, especially for the past three years. Although we would expect some increases since earlier created issues are given more time to solve, yet plotly’s increases is substantial (from 30%+ in 2019 to 50%+ in 2020 and to 70%+ in 2021). When compared to ggplot, plotly’s percentage of both issues and pull requests are much higher even though plotly has fewer issue and pull requests than ggplot in absolute terms. 5.7 How long to solve issues/pull requests? Next, let’s move our attention to closed issues and pull requests. We calculate issues and pull requests’ solved time (which is defined as close time - create time) and divided the time into periods of 30 days (or 1 month). And we can see most of issues/pull requests were closed within one month but plotly seems to have larger percentage of issues that were open for more than one year. 5.8 Do different years exhibit different patterns to solve issue/pull request? Breaking down the percentage over 2014-2021, we can see that both packages seems to having a trend of taking longer to “close” their issues. But the pattern is very different for pull requests, the percentage of pull requests closes within one month increases for the past several years. The contrast is most spark for plotly in 2021, only about 25% of issues are closed within two months, but over 80% of pull requests are closed within one month. "],["interactive-component.html", "Chapter 6 Interactive component 6.1 How about seeing time trend in a dynamic way? 6.2 Look deep into the overview", " Chapter 6 Interactive component 6.1 How about seeing time trend in a dynamic way? The line fluctuates during years and after 2018, ggplot2 is in the higher position for pull requests and issues. 6.2 Look deep into the overview We can choose the part to see the overview of time trends for these two packages. A decreasing trend for the commits of both packages over time. And an increasing trend for both packages in 2015. You can click the button on the left to see the line chart for commit, issue, and pull request. "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion Users prefer weekdays especially the users to create commits and pull requests of plotly. For issues, “NONE” users, namely the ordinary users like us, are active; for pull requests, “COLLABORATOR/MEMBER” users of both packages are active. Plotly has more percentage of unsolved issues and pull requests and the solving time of closed cases takes longer. Some hypothesis can account for this. Issues of plotly may be difficult to solve or the maintainers of plotly respond slowly or the public involved are not active to solve the problems. The development of two packages has slowed down over the past few years. These years, it takes longer to close the issue and it takes shorter to close the pull requests. Some hypothesis can account for this. Due to the pandemic, the work efficiency has been influenced. Or both packages are up-to-date enough and the functions can meet user’s need. Or the problems are too difficult to work out in a short time. Some limitations: It is hard to analysis all the increases, decreases or fluctuations simply based on the data we have since there may be tons of factors in play. If possible, we could also crawl all commits of other branches and see if it can add more information to our analysis. Furthermore, all the comments under each issues and pull requests may also be a good spot toe explore. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
